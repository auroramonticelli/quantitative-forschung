fill = "Profession"  # Legendentitel hier ändern
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "grey90")
) +
scale_fill_brewer(palette = "Blues")
# 5. Descriptive Analyse   ----------------------------------------
# Grundlegende Datenexploration (bereits bekannt)
str(data)
head(data)
summary(data)
# Häufigkeiten kategorialer Variablen
table(data$gender)
table(data$profession)
# Deskriptive Statistiken für numerische Variablen
mean(data$job_satisfaction)    # Mittelwert
sd(data$job_satisfaction)      # Standardabweichung
median(data$job_satisfaction)   # Median
# 5. Descriptive Analyse   ----------------------------------------
# Grundlegende Datenexploration (bereits bekannt)
str(data)
head(data)
summary(data)
# Häufigkeiten kategorialer Variablen
table(data$gender)
table(data$profession)
# Deskriptive Statistiken für numerische Variablen
mean(data$job_satisfaction)    # Mittelwert
sd(data$job_satisfaction)      # Standardabweichung
median(data$job_satisfaction)   # Median
# 5. Inferenzstatistik   ----------------------------------------
# Chi-Quadrat
# Kreuztabelle erstellen: Geschlecht vs. Beruf
table(data$gender, healthcare_data$profession)
# 5. Inferenzstatistik   ----------------------------------------
# Chi-Quadrat
# Kreuztabelle erstellen: Geschlecht vs. Beruf
table(data$gender, data$profession)
# Chi-Quadrat Test durchführen
chisq_result <- chisq.test(table(data$gender, data$profession))
head(data)
# Create educational dataset that fits chi-square assumptions
data <- data.frame(
ID = 1:120,
gender = rep(c("Female", "Male"), each = 60),
profession = rep(
c("Doctor", "Nurse", "Nutritionist", "Physiotherapist", "Psychologist"),
times = c(30, 40, 15, 15, 20)
),
job_satisfaction = sample(0:4, 120, replace = TRUE)
)
# Check the table
table(data_educational$gender, data_educational$profession)
# Create educational dataset that fits chi-square assumptions
data <- data.frame(
ID = 1:120,
gender = rep(c("Female", "Male"), each = 60),
profession = rep(
c("Doctor", "Nurse", "Nutritionist", "Physiotherapist", "Psychologist"),
times = c(30, 40, 15, 15, 20)
),
job_satisfaction = sample(0:4, 120, replace = TRUE)
)
# Check the table
table(data$gender, data$profession)
# 2. Daten importieren ---------------------------------
# Daten aus CSV-Datei laden
data <- read.csv("healthcare_job_satisfaction.csv")
# 5. Inferenzstatistik   ----------------------------------------
# Chi-Quadrat
# Kreuztabelle erstellen: Geschlecht vs. Beruf
table(data$gender, data$profession)
# 5. Inferenzstatistik   ----------------------------------------
# Chi-Quadrat
data_chi <- data %>%
filter(profession == "Doctor" | profession == "Nurse")
data_chi
a
# Kreuztabelle erstellen: Geschlecht vs. Beruf
table(data_chi$gender, data_chi$profession)
# Chi-Quadrat Test durchführen
chisq_result <- chisq.test(table(data$gender, data$profession))
print(chisq_result)
data
table(data$profession)
# Double the dataset while preserving distributions
set.seed(123) # For reproducibility
# Create a copy of the original data with new IDs
new_data <- data
# Generate new IDs for the duplicated data
new_data$ID <- (nrow(data) + 1):(2 * nrow(data))
# Combine original and duplicated data
doubled_data <- rbind(data, new_data)
# Add small random noise to job_satisfaction to avoid exact duplicates
# while preserving the overall distribution
doubled_data$job_satisfaction <- doubled_data$job_satisfaction +
sample(c(-1, 0, 1), nrow(doubled_data), replace = TRUE, prob = c(0.1, 0.8, 0.1))
# Ensure job_satisfaction stays within bounds (0-5)
doubled_data$job_satisfaction <- pmax(0, pmin(5, doubled_data$job_satisfaction))
# Verify the distributions are preserved
cat("Original data summary:\n")
print(table(data$gender, data$profession))
cat("\nJob satisfaction original:\n")
print(summary(data$job_satisfaction))
cat("\nDoubled data summary:\n")
print(table(doubled_data$gender, doubled_data$profession))
cat("\nJob satisfaction doubled:\n")
print(summary(doubled_data$job_satisfaction))
# Verify proportions are maintained
cat("\nGender proportions - Original:\n")
print(prop.table(table(data$gender)))
cat("\nGender proportions - Doubled:\n")
print(prop.table(table(doubled_data$gender)))
cat("\nProfession proportions - Original:\n")
print(prop.table(table(data$profession)))
cat("\nProfession proportions - Doubled:\n")
print(prop.table(table(doubled_data$profession)))
data
doubled_data
write.csv(healtcare_test_data, "C:/Users/YourUsername/Documents/doubled_healthcare_dataset.csv", row.names = FALSE)
write.csv(doubled_data, "C:/Users/YourUsername/Documents/healthcare_data.csv", row.names = FALSE)
write.csv(doubled_data, "healthcare_data.csv", row.names = FALSE)
healthcare_data <- read.csv("healthcare_data.csv")
# Kreuztabelle erstellen: Geschlecht vs. Beruf
table(healthcare_data$gender, healthcare_data$profession)
# Chi-Quadrat Test durchführen
chisq_result <- chisq.test(table(healthcare_data$gender, healthcare_data$profession))
print(chisq_result)
# Erwartete Häufigkeiten anzeigen
chisq_result$expected
# Standardisierte Residuen analysieren
chisq_result$residuals
# Cramér's V als Effektstärke berechnen
library(vcd)
assocstats(table(healthcare_data$gender, healthcare_data$profession))
# 5. Inferenzstatistik   ----------------------------------------
# Chi-Quadrat
# Kreuztabelle erstellen: Geschlecht vs. Beruf
table(healthcare_data$gender, healthcare_data$profession)
# Chi-Quadrat Test durchführen
chisq_result <- chisq.test(table(healthcare_data$gender, healthcare_data$profession))
print(chisq_result)
# Erwartete Häufigkeiten anzeigen
chisq_result$expected
# Standardisierte Residuen analysieren
chisq_result$residuals
# Cramér's V als Effektstärke berechnen
library(vcd)
assocstats(table(healthcare_data$gender, healthcare_data$profession))
# 1. Pakete laden ---------------------------------------
library(tidyverse)  # Sammlung von Paketen für Datenwissenschaft
library(readxl)     # Für Excel-Dateien
library(vcd)
# 2. Daten importieren ---------------------------------
# Daten aus CSV-Datei laden
data <- read.csv("healthcare_job_satisfaction.csv")
data <- read.csv("healthcare_data.csv")
# 3. Daten anschuaen ---------------------------------
# Erste Zeilen anzeigen
head(data)
# Datenstruktur untersuchen
print(data)
# Zusammenfassende Statistiken
summary(data)
# Fehlende Werte
sum(is.na(data))
# 3. Visualisierung durch plots ---------------------------------
# Barplot für Anzahl TeilnehmerInnen nach Geschlecht
ggplot(data, aes(x = factor(gender))) +
geom_bar(fill = "#b9aadf") +
labs(title = "Anzahl von TeilnehmerInnen nach Geschlecht",
x = "Geschlecht", y = "Häufigkeit")
# Boxplot für Arbeitszufriedenheit nach Geschlecht
ggplot(data, aes(x = factor(gender), y = job_satisfaction)) +
geom_boxplot(fill = "#B6CEB4") +
labs(title = "Arbeitszufriedenheit nach Geschlecht",
x = "Geschlecht", y = "Arbeitszufriedenheit")
# Histogram für Arbeitszufriedenheit
ggplot(data, aes(x = job_satisfaction)) +
geom_bar(fill = "#BBDCE5") +
labs(title = "Verteilung der Arbeitszufriedenheit",
x = "Arbeitszufriedenheit", y = "Häufigkeit")
# 4. Ästhetische Anpassungen ------------------------------------
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() + #Basis des Balkendiagrams
labs(
title = "Anzahl der Beschäftigten nach Beruf",
x = "Beruf", # X-Achsen-Beschriftung
y = "Häufigkeit", # Y-Achsen-Beschriftung
fill = "Profession"  # Legendentitel
) +
theme(
plot.title = element_text(size = 16, face = "bold"),  # Titel-Stil
axis.title = element_text(size = 12), # Achsen-Titel-Stil
axis.text = element_text(size = 10), # Achsen-Titel-Stil
panel.background = element_rect(fill = "white"), # Weisser Hintergrund
panel.grid.major = element_line(color = "grey90") # Heller Gitternetz
) +
scale_fill_brewer(palette = "Blues")  # Farbpalette für die Balken
# 5. Descriptive Analyse   ----------------------------------------
# Grundlegende Datenexploration (bereits bekannt)
str(data)
head(data)
summary(data)
# Häufigkeiten kategorialer Variablen
table(data$gender)
table(data$profession)
# Deskriptive Statistiken für numerische Variablen
mean(data$job_satisfaction)    # Mittelwert
sd(data$job_satisfaction)      # Standardabweichung
median(data$job_satisfaction)   # Median
# 5. Inferenzstatistik   ----------------------------------------
# Chi-Quadrat
# Kreuztabelle erstellen: Geschlecht vs. Beruf
table(data$gender, data$profession)
# Chi-Quadrat Test durchführen
chisq_result <- chisq.test(table(data$gender, data$profession))
print(chisq_result)
# Erwartete Häufigkeiten anzeigen
chisq_result$expected
# Standardisierte Residuen analysieren
chisq_result$residuals
# Cramér's V als Effektstärke berechnen
assocstats(table(data$gender, data$profession))
## Proportionen Test
# Ein-Stichproben Test: Anteil weiblicher Beschäftigter vs. 50%
female_count <- sum(data$gender == "Female")  # Anzahl weibliche Beschäftigte
total_count <- nrow(data) # Anzahl Beschäftigte Ingesamt
prop.test(x = 142, n = 200, p = 0.5, alternative = "greater") # Proportionen Test
# Zwei-Stichproben Test: Vergleich der Zufriedenheitsanteile (≥4) zwischen Geschlechtern
female_high_satisfaction <- sum(data$gender == "Female" & data$job_satisfaction >= 4)
male_high_satisfaction <- sum(data$gender == "Male" & data$job_satisfaction >= 4)
female_total <- sum(data$gender == "Female")
male_total <- sum(data$gender == "Male")
prop.test(c(female_high_satisfaction, male_high_satisfaction),
c(female_total, male_total))
female_high_satisfaction <- sum(data$gender == "Female" & data$job_satisfaction >= 4)
male_high_satisfaction <- sum(data$gender == "Male" & data$job_satisfaction >= 4)
female_total <- sum(data$gender == "Female")
male_total <- sum(data$gender == "Male")
female_count <- sum(data$gender == "Female")
total_count <- nrow(data)
prop.test(female_count, total_count, p = 0.5, alternative = "greater")
# Zwei-Stichproben Test: Vergleich der Zufriedenheitsanteile (≥4) zwischen Geschlechtern
female_high_satisfaction <- sum(data$gender == "Female" & data$job_satisfaction >= 4)
male_high_satisfaction <- sum(data$gender == "Male" & data$job_satisfaction >= 4)
female_total <- sum(data$gender == "Female")
male_total <- sum(data$gender == "Male")
prop.test(c(female_high_satisfaction, male_high_satisfaction),
c(female_total, male_total))
## t-Test & Mann-Whitney U-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[healthcare_data$gender == "Female"])
shapiro.test(data$job_satisfaction[healthcare_data$gender == "Male"])
# Überprüfung der Varianzhomogenität mit Levene-Test
leveneTest(job_satisfaction ~ gender, data = data)
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
# Effektstärke berechnen (Cohen's d für t-Test)
cohens_d(job_satisfaction ~ gender, data = data)
library(car)
library(effectsize)
## t-Test & Mann-Whitney U-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[healthcare_data$gender == "Female"])
shapiro.test(data$job_satisfaction[healthcare_data$gender == "Male"])
# Überprüfung der Varianzhomogenität mit Levene-Test
leveneTest(job_satisfaction ~ gender, data = data)
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
## t-Test & Mann-Whitney U-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[data$gender == "Female"])
shapiro.test(data$job_satisfaction[data$gender == "Male"])
# Überprüfung der Varianzhomogenität mit Levene-Test
leveneTest(job_satisfaction ~ gender, data = data)
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
## t-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
## Mann-Whitney U-Test
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
table(data$profession)
## t-Test
data <- data %>%
filter(profession %in% c("Doctor", "Nurse"))
data
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[data$profession == "Doctor"])
shapiro.test(data$job_satisfaction[data$profession == "Nurse"])
data <- read.csv("healthcare_data.csv")
## t-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[data$profession == "Female"])
shapiro.test(data$job_satisfaction[data$profession == "Male"])
## Mann-Whitney U-Test
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
## t-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[data$gender == "Female"])
shapiro.test(data$job_satisfaction[data$profegenderssion == "Male"])
## Mann-Whitney U-Test
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
## t-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[data$gender == "Female"])
shapiro.test(data$job_satisfaction[data$gender == "Male"])
## Mann-Whitney U-Test
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
describe(data)
install.packages("psych")
# Paket laden (jede Session)
library(psych)
# Magische Übersicht!
describe(data)
### 2. Daten importieren ---------------------------------
# Daten aus CSV-Datei laden
# data <- read.csv("healthcare_job_satisfaction.csv")
data <- read.csv("healthcare_data.csv")
### 5. Descriptive Analyse   ----------------------------------------
# Grundlegende Datenexploration (bereits bekannt)
str(data)
head(data)
summary(data)
# Häufigkeiten kategorialer Variablen
table(data$gender)
table(data$profession)
# Deskriptive Statistiken für numerische Variablen
mean(data$job_satisfaction)    # Mittelwert
sd(data$job_satisfaction)      # Standardabweichung
median(data$job_satisfaction)   # Median
## t-Test
# t-Test für unabhängige Stichproben: Zufriedenheit nach Geschlecht
t.test(job_satisfaction ~ gender, data = data)
# Überprüfung der Normalverteilung mit Shapiro-Wilk-Test
shapiro.test(data$job_satisfaction[data$gender == "Female"])
shapiro.test(data$job_satisfaction[data$gender == "Male"])
## Mann-Whitney U-Test
# Mann-Whitney U-Test (nicht-parametrische Alternative)
wilcox.test(job_satisfaction ~ gender, data = data)
ggplot(data, aes(x = profession)) +
geom_bar()  # Lila Farbe für alle Balken+
scale_fill_brewer(palette = "Blues")  # Farbpalette für die Balken
ggplot(data, aes(x = profession)) +
geom_bar()+
scale_fill_brewer(palette = "Blues")  # Farbpalette für die Balken
ggplot(data, aes(x = profession)) +
geom_bar()+
scale_fill_brewer(palette = "Blues")
ggplot(data, aes(x = profession)) +
geom_bar() + scale_fill_brewer(palette = "Blues")
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() +
scale_fill_brewer(palette = "Blues")
ggplot(data, aes(x = profession, fill = gender)) +
geom_bar(position = "dodge") +  # "dodge" = nebeneinander
scale_fill_brewer(palette = "Blues") +
theme_minimal()
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() + #Basis des Balkendiagrams
labs(
title = "Anzahl der Beschäftigten nach Beruf",
x = "Beruf", # X-Achsen-Beschriftung
y = "Häufigkeit", # Y-Achsen-Beschriftung
fill = "Profession"  # Legendentitel
) +
theme(
plot.title = element_text(size = 16, face = "bold"),  # Titel-Stil
axis.title = element_text(size = 12), # Achsen-Titel-Stil
axis.text = element_text(size = 10), # Achsen-Titel-Stil) +
theme_minimal()
ggplot(data, aes(x = profession, fill = profession)) +
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() + #Basis des Balkendiagrams
labs(
title = "Anzahl der Beschäftigten nach Beruf",
x = "Beruf", # X-Achsen-Beschriftung
y = "Häufigkeit", # Y-Achsen-Beschriftung
fill = "Profession"  # Legendentitel
) +
theme(
plot.title = element_text(size = 16, face = "bold"),  # Titel-Stil
axis.title = element_text(size = 12), # Achsen-Titel-Stil
axis.text = element_text(size = 10), # Achsen-Titel-Stil) +
theme_minimal()
ggplot(data, aes(x = profession, fill = gender)) +
geom_bar(position = "dodge") +  # "dodge" = nebeneinander
scale_fill_brewer(palette = "Blues") +
theme_minimal()
# Komplette Grafik mit allen Anpassungen
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() + #Basis des Balkendiagrams
labs(
title = "Anzahl der Beschäftigten nach Beruf",
x = "Beruf", # X-Achsen-Beschriftung
y = "Häufigkeit", # Y-Achsen-Beschriftung
fill = "Profession"  # Legendentitel
) +
theme(
plot.title = element_text(size = 16, face = "bold"),  # Titel-Stil
axis.title = element_text(size = 12), # Achsen-Titel-Stil
axis.text = element_text(size = 10), # Achsen-Titel-Stil) +
theme_minimal()
# Komplette Grafik mit allen Anpassungen
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() + #Basis des Balkendiagrams
labs(
title = "Anzahl der Beschäftigten nach Beruf",
x = "Beruf", # X-Achsen-Beschriftung
y = "Häufigkeit", # Y-Achsen-Beschriftung
fill = "Profession"  # Legendentitel ) +
theme(
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() + #Basis des Balkendiagrams
labs(
title = "Anzahl der Beschäftigten nach Beruf",
x = "Beruf", # X-Achsen-Beschriftung
y = "Häufigkeit", # Y-Achsen-Beschriftung
fill = "Profession"  # Legendentitel
) +
theme(
plot.title = element_text(size = 16, face = "bold"),  # Titel-Stil
axis.title = element_text(size = 12), # Achsen-Titel-Stil
axis.text = element_text(size = 10), # Achsen-Titel-Stil
) +
theme_minimal()
### 1. Pakete laden ---------------------------------------
library(tidyverse)  # Sammlung von Paketen für Datenwissenschaft
library(readxl)     # Für Excel-Dateien
library(vcd)
### 2. Daten importieren ---------------------------------
# Daten aus CSV-Datei laden
# data <- read.csv("healthcare_job_satisfaction.csv")
data <- read.csv("healthcare_data.csv")
# 3. Daten anschuaen ---------------------------------
# Erste Zeilen anzeigen
head(data)
# Datenstruktur untersuchen
print(data)
# Zusammenfassende Statistiken
summary(data)
# Fehlende Werte
sum(is.na(data))
### 3. Visualisierung durch plots ---------------------------------
# Barplot für Anzahl TeilnehmerInnen nach Geschlecht
ggplot(data, aes(x = factor(gender))) +
geom_bar(fill = "#b9aadf") +
labs(title = "Anzahl von TeilnehmerInnen nach Geschlecht",
x = "Geschlecht", y = "Häufigkeit")
# Boxplot für Arbeitszufriedenheit nach Geschlecht
ggplot(data, aes(x = factor(gender), y = job_satisfaction)) +
geom_boxplot(fill = "#B6CEB4") +
labs(title = "Arbeitszufriedenheit nach Geschlecht",
x = "Geschlecht", y = "Arbeitszufriedenheit")
# Histogram für Arbeitszufriedenheit
ggplot(data, aes(x = job_satisfaction)) +
geom_bar(fill = "#BBDCE5") +
labs(title = "Verteilung der Arbeitszufriedenheit",
x = "Arbeitszufriedenheit", y = "Häufigkeit")
ggplot(data, aes(x = profession, fill = profession)) +
geom_bar() + #Basis des Balkendiagrams
labs(
title = "Anzahl der Beschäftigten nach Beruf",
x = "Beruf", # X-Achsen-Beschriftung
y = "Häufigkeit", # Y-Achsen-Beschriftung
fill = "Profession"  # Legendentitel
) +
theme(
plot.title = element_text(size = 16, face = "bold"),  # Titel-Stil
axis.title = element_text(size = 12), # Achsen-Titel-Stil
axis.text = element_text(size = 10), # Achsen-Titel-Stil
) +
theme_minimal() # Hintergrund vereinfachen
#Load packages
library("tidyverse")
library("hablar")
library("psych")
##Load data
#Make sure to be connected to the INS server for the next step
data <- read.csv("/Volumes/research$/ENGAGE/WP 1/3. Survey Study/6. Data/results-survey_20250625_coded_answers.csv", na.strings="")
##Load data
#Make sure to be connected to the INS server for the next step
data <- read.csv("/Volumes/research$/ENGAGE/WP 1/3. Survey Study/6. Data/results-survey_20250625_coded_answers.csv", na.strings="")
table(data$profession)
data <- read.csv("/Volumes/research$/ENGAGE/WP 1/3. Survey Study/6. Data/results-survey_20250625_full_answers.csv", na.strings="")
table(data$profession)
##Remove incomplete rows
#Drop NAs based on the last survey variable
data = data %>%
drop_na(workexperience)
table(data$profession)
